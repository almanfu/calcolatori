/*1################################*/

typedef long long int INT64;
typedef unsigned long long int UINT64;

void SumV(INT64 *u, INT64 *z, INT64 *v, UINT64 size ){
    for (UINT64 i=0; i < size; i++) {
        z[i] = u[i]*v[i] - u[size-i]*v[size-i];
        if (z[i] < 0) {
            z[i] = z[i]*z[i]*2;
        }
        else {
            z[i] = -1*z[i]*z[i]*2;
        }
    }
}

SumV(long long*, long long*, long long*, unsigned long long):
        movq    %rsi, %r8
        movq    %rdx, %r9
        testq   %rcx, %rcx
        X1
        jmp     .L5
.L3:
        subq    %rdx, %rax
        imulq   %r10, %rax
        X2
        subq    $8, %rcx
        je      .L1
.L5:
        movq    (%r9,%rsi), %rdx
        imulq   (%rdi,%rsi), %rdx
        movq    (%r9,%rcx), %rax
        imulq   (%rdi,%rcx), %rax
        movq    %rdx, %r10
        subq    %rax, %r10
        jns     .L3
        imulq   %r10, %r10
        X3
        subq    $8, %rcx
        jne     .L5
.L1:
        ret




        X1
        je      .L1
        salq    $3, %rcx
        xorl    %esi, %esi

        X2
        addq    %rax, %rax
        movq    %rax, (%r8,%rsi)
        addq    $8, %rsi

        X3
        leaq    (%r10,%r10), %rax
        movq    %rax, (%r8,%rsi)
        addq    $8, %rsi

/*2################################*/

void f(int * u, int * v, int * z, unsigned int size) {
  for (int i = 0; i < size; i++) {
    if (*v > *u) {
      *(z++) = *(v++) - *(u++);
      }
    }
  }

f(int*, int*, int*, unsigned int):
        testl   %ecx, %ecx
        je      .L1
        xorl    %r8d, %r8d
.L4:
        movl    (%rsi), %eax
        X1
        subl    %r9d, %eax
        X2
        addq    $4, %rdx
        movl    %eax, -4(%rdx)
.L3:
        addl    $1, %r8d
        X3
        jne     .L4
.L1:
        ret




        X1
        movl    (%rdi), %r9d
        cmpl    %r9d, %eax
        jle     .L3
        X2
        addq    $4, %rsi
        addq    $4, %rdi
        X3
        cmpl    %ecx, %r8d
  
/*3################################*/

void copia_stringa(char d[], const char s[]) {
  unsigned char i = 0;
  while ((d[i] = s[i]) != 0) {
    i += 1;
  }
}

copia_stringa(char*, char const*):
        movzbl  (%rsi), %eax
        X1
        je      .L1
        movl    $0, %eax
.L3:
        addl    $1, %eax
        X2
        movb    %dl, (%rdi,%rcx)
        testb   %dl, %dl
        X3
.L1:
        ret




        X1
        movb    %al, (%rdi)
        testb   %al, %al
        X2
        movzbl  %al, %ecx
        movzbl  (%rsi,%rcx), %edx
        X3
        jne     .L3
  
/*4################################*/

bool is_prime(int n)
{
  for (int i = 2; i <= n / 2; i++)
  {
    if ((n % i) == 0)
      return false;
  }
  return n > 1;
}

is_prime(int):
        movl    %edi, %esi
        shrl    $31, %esi
        addl    %edi, %esi
        sarl    %esi
        X1
        testb   $1, %dil
        je      .L6
        movl    $2, %ecx
.L4:
        addl    $1, %ecx
        cmpl    %esi, %ecx
        X2
        cltd
        idivl   %ecx
        X3
        movl    $0, %eax
        ret
.L2:
        cmpl    $1, %edi
        setg    %al
        ret
.L6:
        movl    $0, %eax
        ret




        X1
        cmpl    $3, %edi
        jle     .L2
        X2
        jg      .L2
        movl    %edi, %eax
        X3
        testl   %edx, %edx
        jne     .L4
  
/*5################################*/

bool is_prime_rec(int n, int i = 2)
{
  if (i > n / 2)
    return n > 1;
  else if (n % i == 0)
    return false;
  else
    return is_prime_rec(n, i + 1);
}

is_prime_rec(int, int):
        pushq   %rbp
        movq    %rsp, %rbp
        subq    $16, %rsp
        movl    %edi, -4(%rbp)
        movl    %esi, -8(%rbp)
        X1
        sarl    %eax
        cmpl    %eax, -8(%rbp)
        jle     .L2
        cmpl    $1, -4(%rbp)
        setg    %al
        jmp     .L3
.L2:
        movl    -4(%rbp), %eax
        cltd
        idivl   -8(%rbp)
        X2
        jne     .L4
        movl    $0, %eax
        jmp     .L3
.L4:
        movl    -8(%rbp), %eax
        leal    1(%rax), %edx
        movl    -4(%rbp), %eax
        X3
        call    is_prime_rec(int, int)
        nop
.L3:
        leave
        ret




        X1
        movl    -4(%rbp), %eax
        movl    %eax, %edx
        shrl    $31, %edx
        addl    %edx, %eax
        X2
        movl    %edx, %eax
        testl   %eax, %eax
        X3
        movl    %edx, %esi
        movl    %eax, %edi
  
/*6################################*/

void lambda_swap(unsigned int &a, unsigned int &b)
{
  // Swap 8 lsb of two numbers
  unsigned int a_ = a, b_ = b;
  unsigned int a_res, b_res;
  const unsigned int shift = (sizeof(int) - 1) * 8;

  a_ = (a_ >> 8) << 8;         // lsb set to 0
  b_ = (b_ << shift) >> shift; // all bytes but the lsb set to 0

  a_res = a_ | b_;

  a_ = a;
  b_ = b;

  a_ = (a_ << shift) >> shift; // all bytes but the lsb set to 0
  b_ = (b_ >> 8) << 8;         // lsb set to 0

  b_res = a_ | b_;

  a = a_res;
  b = b_res;
}

lambda_swap(unsigned int&, unsigned int&):
        movl    (%rdi), %eax
        movl    (%rsi), %edx
        X1
        movzbl  %al, %eax
        xorb    %dl, %dl
        X2
        orl     %r8d, %ecx
        movl    %ecx, (%rdi)
        X3
        ret




        X1
        movl    %eax, %ecx
        movzbl  %dl, %r8d
        X2
        xorb    %cl, %cl
        orl     %edx, %eax
        X3
        movl    %eax, (%rsi)
  
/*7################################*/

int division(int a, int b, int &remainder)
{ // a>=0, b>0
  int quotient = 0;
  while (a >= b)
  {
    a -= b;
    quotient++;
  }
  remainder = a;
  return quotient;
}

division(int, int, int&):
        cmpl    %esi, %edi
        jl      .L4
        movl    $0, %eax
.L3:
        X1
        cmpl    %edi, %esi
        jle     .L3
.L2:
        X2
        ret
.L4:
        movl    $0, %eax
        X3




        X1
        subl    %esi, %edi
        addl    $1, %eax
        X2
        movl    %edi, (%rdx)
        X3
        jmp     .L2
  
/*8################################*/

int gcd(int a, int b)
{ // Euclidean Algorithm
  // a > b
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}

gcd(int, int):
        movl    %edi, %eax
        X1
        ret
.L7:
        subq    $8, %rsp
        X2
        idivl   %esi
        movl    %edx, %esi
        X3
        ret




        X1
        testl   %esi, %esi
        jne     .L7
        X2
        movl    %esi, %edi
        cltd
        X3
        call    gcd(int, int)
        addq    $8, %rsp
  
/*9################################*/

int fib(int n){// n >= 0
  if(n == 0 || n == 1)
    return 1;
  else
    return fib(n-1)+fib(n-2);
}

fib(int):
        movl    $1, %eax
        cmpl    $1, %edi
        X1
        pushq   %rbx
        subq    $8, %rsp
        movl    %edi, %ebx
        leal    -1(%rdi), %edi
        X2
        leal    -2(%rbx), %edi
        call    fib(int)
        addl    %ebp, %eax
        X3
        popq    %rbp
        ret
.L5:
        ret




        X1
        jbe     .L5
        pushq   %rbp
        X2
        call    fib(int)
        movl    %eax, %ebp
        X3
        addq    $8, %rsp
        popq    %rbx
  
/*10###############################*/

int fact(int n){// n >= 0
  if(n == 0 || n == 1)
    return 1;
  else
    return n*fact(n-1);
}
fact(int):
        movl    $1, %eax
        X1
        jbe     .L1
.L2:
        movl    %edi, %edx
        X2
        cmpl    $1, %edi
        X3
.L1:
        ret



        X1
        cmpl    $1, %edi
        X2
        subl    $1, %edi
        imull   %edx, %eax
        X3
        jne     .L2

/*11###############################*/

bool is_alnum(char c)
{
  return ('a' <= c && c <= 'z') ||
         ('A' <= c && c <= 'Z') ||
         ('0' <= c && c <= '9');
}

is_alnum(char):
        movl    %edi, %eax
        X1
        movl    $1, %edx
        cmpb    $25, %al
        X2
        cmpb    $9, %dil
        setbe   %dl
.L1:
        X3
        ret




        X1
        andl    $-33, %eax
        subl    $65, %eax
        X2
        jbe     .L1
        subl    $48, %edi
        X3
        movl    %edx, %eax
  
/*12###############################*/

void crypt(char word[], int key)
{
  int i = 0;
  while (word[i] != '\0')
  {
    word[i] = (((word[i] - 'a') + key) % ('z' - 'a')) + 'a';
    i++;
  }
}

crypt(char*, int):
        movl    $25, %ecx
.L2:
        movsbl  (%rdi), %eax
        X1
        leal    -97(%rsi,%rax), %eax
        incq    %rdi
        cltd
        X2
        movb    %dl, -1(%rdi)
        X3
.L5:
        ret



        X1
        testb   %al, %al
        je      .L5
        X2
        idivl   %ecx
        addl    $97, %edx
        X3
        jmp     .L2
  
/*13###############################*/

void decrypt(char word[], int key)
{
  int i = 0;
  while (word[i] != '\0')
  {
    word[i] = (((word[i] - 'a') - key) % ('z' - 'a')) + 'a';
    i++;
  }
}

decrypt(char*, int):
        movl    $25, %ecx
.L2:
        movsbl  (%rdi), %eax
        X1
        subl    $97, %eax
        incq    %rdi
        X2
        idivl   %ecx
        addl    $97, %edx
        X3
        jmp     .L2
.L5:
        ret



        X1
        testb   %al, %al
        je      .L5
        X2
        subl    %esi, %eax
        cltd
        X3
        movb    %dl, -1(%rdi)
  
/*14###############################*/
int strlen (char *s){
  int n = 0;
  while (s[n] != '\0')
    n++;
  return n;
}

void reverse(char s[])
{
  int n = strlen(s);
  for (int i = 0; i < n; i++)
    s[n - 1 - i] = s[i];
}

strlen(char*):
        cmpb    $0, (%rdi)
        je      .L4
        movl    $1, %edx
.L3:
        movq    %rdx, %rax
        addq    $1, %rdx
        cmpb    $0, -1(%rdi,%rdx)
        jne     .L3
        ret
.L4:
        movl    $0, %eax
        ret
reverse(char*):
        pushq   %rbx
        X1
        jle     .L6
        movq    %rbx, %rdx
        X2
        leaq    (%rbx,%rax), %rdi
.L8:
        movzbl  (%rdx), %eax
        movb    %al, (%rcx)
        X3
        cmpq    %rdi, %rdx
        jne     .L8
.L6:
        popq    %rbx
        ret




        X1
        movq    %rdi, %rbx
        call    strlen(char*)
        testl   %eax, %eax
        X2
        cltq
        leaq    -1(%rbx,%rax), %rcx
        X3
        addq    $1, %rdx
        subq    $1, %rcx
  
/*15###############################*/

int mathforfun(int i, int j,
  int q, int s){
  for(i=0;i<q; i++){
    q=q+s;
    q=q-j;
  }
return q;
}

mathforfun(int, int, int, int):
        movl    %edx, %eax
        X1
        xorl    %edx, %edx
        subl    %esi, %ecx
.L3:
        X2
        cmpl    %edx, %eax
        X3
.L2:
        ret




        X1
        testl   %edx, %edx
        jle     .L2
        X2
        addl    %ecx, %eax
        addl    $1, %edx
        X3
        jg      .L3
  
/*16###############################*/

void sumV(int* v, int* w, int* z, int size){
  while(size-- != 0){
    *z++ = *v++ + *w++;
  }
}

sumV(int*, int*, int*, int):
        testl   %ecx, %ecx
        X1
        xorl    %eax, %eax
.L3:
        movl    (%rsi,%rax,4), %r8d
        X2
        addq    $1, %rax
        cmpq    %rcx, %rax
        X3
.L1:
        ret



        X1
        je      .L1
        movl    %ecx, %ecx
        X2
        addl    (%rdi,%rax,4), %r8d
        movl    %r8d, (%rdx,%rax,4)
        X3
        jne     .L3
  
/*17###############################*/

long myFunc(long a,long b,long c){
  long result=0;
  result+=a;
  result+=b;
  result+=c;
  return result;
}

myFunc(long, long, long):
        pushq   %rbp
        movq    %rsp, %rbp
        X1
        movq    %rdx, -40(%rbp)
        movq    $0, -8(%rbp)
        X2
        movq    -32(%rbp), %rax
        addq    %rax, -8(%rbp)
        movq    -40(%rbp), %rax
        addq    %rax, -8(%rbp)
        X3
        popq    %rbp
        ret




        X1
        movq    %rdi, -24(%rbp)
        movq    %rsi, -32(%rbp)
        X2
        movq    -24(%rbp), %rax
        addq    %rax, -8(%rbp)
        X3
        movq    -8(%rbp), %rax
  
/*18###############################*/

long sum(long count){
  if(count>0){
    long psum=sum(count-1);
  return psum+count;
  }else{
    return 0;
  }
}

sum(long):
        testq   %rdi, %rdi
        X1
        movq    %rdi, %rbx
        X2
        addq    %rbx, %rax
        popq    %rbx
        ret
.L4:
        X3
        ret




        X1
        jle     .L4
        pushq   %rbx
        X2
        leaq    -1(%rdi), %rdi
        call    sum(long)
        X3
        xorl    %eax, %eax
  
/*19###############################*/

typedef long long int int64;
int64 power(int64 x,int64 y){
  int64 result=1;
  while(y & y != 0){
    result *= x;
    y--;
  }
return result;
}

power(long long, long long):
        xorl    %eax, %eax
        X1
        andq    %rsi, %rax
        je      .L4
.L3:
        xorl    %edx, %edx
        imulq   %rdi, %rax
        X2
        setne   %dl
        testq   %rsi, %rdx
        X3
.L4:
        movl    $1, %eax
        ret




        X1
        testq   %rsi, %rsi
        setne   %al
        X2
        subq    $1, %rsi        
        X3
        jne     .L3
        ret
        
/*20###############################*/

bool comparestring(const char*s1,
const char*s2){
  while((*s1!='\0')&&(*s2!='\0')&&(*s1==*s2)){
    s1++;
    s2++;
  }
  return(*s1==*s2);
}

comparestring(char const*, char const*):
        movzbl  (%rdi), %eax
        testb   %al, %al
        je      .L3
.L2:
        movzbl  (%rsi), %edx
        X1
        testb   %dl, %dl
        je      .L3
        addq    $1, %rdi
        X2
        testb   %al, %al
        jne     .L2
.L3:
        X3
        ret




        X1
        cmpb    %al, %dl
        jne     .L3
        X2
        addq    $1, %rsi
        movzbl  (%rdi), %eax
        X3
        cmpb    %al, (%rsi)
        sete    %al
  
/*21###############################*/

int calcola_media(int A[], int n) {
  int media = 0;
  for(int i = 0; i < n; i++) {
    media = media + A[i];
  }
  return media / n;
}

calcola_media(int*, int):
        testl   %esi, %esi
        jle     .L4
        X1
        leaq    (%rdi,%rax,4), %rcx
        movl    $0, %eax
.L3:
        X2
        cmpq    %rcx, %rdx
        jne     .L3
.L2:
        X3
        ret
.L4:
        movl    $0, %eax
        jmp     .L2




        X1
        movq    %rdi, %rdx
        movslq  %esi, %rax
        X2
        addl    (%rdx), %eax
        addq    $4, %rdx
        X3
        cltd
        idivl   %esi
  
/*22###############################*/

int trova_elemento(int A[], int n, int v) {
  for(int i = 0; i < n; i++) {
    if (A[i]== v) return i;
  }
  return -1;
}

trova_elemento(int*, int, int):
        testl   %esi, %esi
        X1
        movl    $0, %eax
.L4:
        cmpl    %edx, (%rdi,%rax,4)
        je      .L1
        X2
        jne     .L4
        movl    $-1, %eax
        ret
.L5:
        X3
.L1:
        ret




        X1
        jle     .L5
        movslq  %esi, %rsi
        X2
        addq    $1, %rax
        cmpq    %rsi, %rax
        X3
        movl    $-1, %eax
  
/*23###############################*/

void hailstone5(){
  int iter=0;
  int n=5;
  while(n != 1){
    iter++;
    if(n%2){
      n = 3 * n+1;
    }else{
      n = n/2;
    }
  }
}

hailstone5():
        movl    $5, %eax
        jmp     .L4
.L2:
        movl    %eax, %edx
        X1
        sarl    %eax
.L3:
        X2
        je      .L6
.L4:
        testb   $1, %al
        X3
        jmp     .L3
.L6:
        ret




        X1
        shrl    $31, %edx
        addl    %edx, %eax
        X2
        cmpl    $1, %eax
        X3
        je      .L2
        leal    1(%rax,%rax,2), %eax
  
/*24###############################*/

int memcompare(int nb, char*m1, char*m2){
  while(nb-->0){
    if( *m1++ != *m2++){
      return 0;
    }
  }
  return 1;
}

memcompare(int, char*, char*):
        movl    $0, %eax
.L2:
        movl    %edi, %ecx
        subl    %eax, %ecx
        X1
        movzbl  (%rsi,%rax), %ecx
        X2
        je      .L2
        X3
        ret
.L6:
        movl    $1, %eax
        ret




        X1
        testl   %ecx, %ecx
        jle     .L6
        X2
        addq    $1, %rax
        cmpb    -1(%rdx,%rax), %cl
        X3
        movl    $0, %eax
  
/*25###############################*/

typedef long long int int64;
int64 fun(int64* MemVett){
  int64 Ris=0;
  for(int64 i=0; i<100; i++)
    Ris += MemVett[i];
  return Ris;
}

fun(long long*):
        leaq    800(%rdi), %rcx
        movl    $0, %edx
.L2:
        movq    %rdx, %rax
        X1
        movq    %rax, %rdx
        addq    $8, %rdi
        X2
        ret




        X1
        addq    (%rdi), %rax
        X2
        cmpq    %rcx, %rdi
        jne     .L2
  